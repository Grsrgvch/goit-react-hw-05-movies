{"version":3,"file":"static/js/553.bc83e6d5.chunk.js","mappings":"+SAEMA,EAAU,mCAEHC,EAAS,mCAAG,WAAMC,GAAN,uFACFC,EAAAA,EAAAA,IAAA,0DACgCD,EADhC,oBACkDF,IAFhD,cACjBI,EADiB,yBAIhBA,GAJgB,2CAAH,sDAMTC,EAAY,mCAAG,oGACLF,EAAAA,EAAAA,IAAA,iFACuDH,IAFlD,cACpBI,EADoB,yBAInBA,GAJmB,2CAAH,qDAOZE,EAAe,mCAAG,WAAMC,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,6CACmBI,EADnB,oBACiCP,IAFzB,cACvBI,EADuB,yBAKtBA,GALsB,2CAAH,sDAOfI,EAAY,mCAAG,WAAMD,GAAN,uFACLJ,EAAAA,EAAAA,IAAA,6CACmBI,EADnB,4BACyCP,IAFpC,cACpBI,EADoB,yBAKnBA,GALmB,2CAAH,sDAOZK,EAAe,mCAAG,WAAMF,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,6CACmBI,EADnB,4BACyCP,IAFjC,cACvBI,EADuB,yBAKtBA,GALsB,2CAAH,qD,iKC7BfM,EAAgBC,EAAAA,EAAAA,IAAH,qFAMbC,EAAYD,EAAAA,EAAAA,GAAH,ueASTE,EAAYF,EAAAA,EAAAA,GAAH,wdAUTG,GAAYH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,iWAsBTK,EAAiBL,EAAAA,EAAAA,GAAH,2F,kBCM3B,EA7Ca,WACX,OAAkCM,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MAkBjB,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,yFAC2B,IAArBJ,EAAUK,OADhB,iEAMYC,EAAAA,KANZ,gBAKYC,EALZ,EAKIC,KAAQD,QAEVN,EAAaM,GAPf,4CADc,uBAAC,WAAD,wBAedpB,EACD,GAAE,CAACa,KAEF,UAACR,EAAD,YACE,SAACM,EAAD,0BAEA,SAACJ,EAAD,UACGM,EAAUS,KAAI,SAAAC,GACb,OACE,SAACf,EAAD,WACE,UAACC,EAAD,CACEe,GAAE,kBAAaD,EAASrB,IACxBuB,MAAO,CAAEC,KAAMX,GAFjB,WAIE,gBACEY,IAAG,0CAAqCJ,EAASK,aACjDC,IAAI,MAEN,uBAAIN,EAASO,qBATDP,EAASrB,GAa5B,QAIR,C","sources":["api-axios.js","styled/Home.styled.jsx","pages/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '0ca8801a722358b1eb2bcacbc83f2a91';\n\nexport const getMovies = async search => {\n  const result = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${search}&api_key=${API_KEY}`\n  );\n  return result;\n};\nexport const getTopMovies = async () => {\n  const result = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?language=en-US&api_key=${API_KEY}`\n  );\n  return result;\n};\n\nexport const getMovieDetails = async id => {\n  const result = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`\n  );\n\n  return result;\n};\nexport const getMovieCast = async id => {\n  const result = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return result;\n};\nexport const getMovieReviews = async id => {\n  const result = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n\n  return result;\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\nexport const HomeContainer = styled.div`\n  background-color: #000;\n  color: #fff;\n  padding: 20px;\n`;\n\nexport const MovieList = styled.ul`\n  list-style: none;\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: flex-start; /* Начнем отображать элементы слева */\n  gap: 20px; /* Расстояние между элементами */\n`;\n\nexport const MovieItem = styled.li`\n  width: calc(16.666% - 20px); /* Ширина элемента, учитывая отступы */\n  margin: 0;\n  &:hover {\n    box-shadow: 12px -9px 5px 0px rgba(232, 227, 227, 0.75);\n    -webkit-box-shadow: 12px -9px 5px 0px rgba(232, 227, 227, 0.75);\n    -moz-box-shadow: 12px -9px 5px 0px rgba(232, 227, 227, 0.75);\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  color: #fff;\n  text-decoration: none;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  img {\n    max-width: 100%;\n    height: auto;\n  }\n\n  p {\n    font-size: 18px;\n    margin-top: 10px;\n    text-align: center;\n  }\n\n  &:hover {\n    text-shadow: 7px -4px 2px rgba(218, 213, 213, 0.6);\n  }\n`;\nexport const TopMoviesTitle = styled.h1`\n  font-size: 24px;\n  margin-bottom: 20px;\n  text-align: center;\n`;\n","import { useEffect, useState } from 'react';\nimport * as GetMovies from '../api-axios';\nimport {\n  HomeContainer,\n  MovieList,\n  MovieItem,\n  MovieLink,\n  TopMoviesTitle,\n} from '../styled/Home.styled';\nimport { useLocation } from 'react-router-dom';\nconst Home = () => {\n  const [topMovies, setTopMovies] = useState([]);\n  const location = useLocation();\n  useEffect(() => {\n    async function getTopMovies() {\n      if (topMovies.length !== 0) {\n        return;\n      }\n      const {\n        data: { results },\n      } = await GetMovies.getTopMovies();\n      setTopMovies(results);\n      try {\n      } catch (error) {\n        console.log('Error!');\n      } finally {\n      }\n    }\n    getTopMovies();\n  }, [topMovies]);\n  return (\n    <HomeContainer>\n      <TopMoviesTitle>Top Movies</TopMoviesTitle>\n\n      <MovieList>\n        {topMovies.map(topMovie => {\n          return (\n            <MovieItem key={topMovie.id}>\n              <MovieLink\n                to={`/movies/${topMovie.id}`}\n                state={{ from: location }}\n              >\n                <img\n                  src={`https://image.tmdb.org/t/p/w500/${topMovie.poster_path}`}\n                  alt=\"\"\n                />\n                <p>{topMovie.original_title}</p>\n              </MovieLink>\n            </MovieItem>\n          );\n        })}\n      </MovieList>\n    </HomeContainer>\n  );\n};\nexport default Home;\n"],"names":["API_KEY","getMovies","search","axios","result","getTopMovies","getMovieDetails","id","getMovieCast","getMovieReviews","HomeContainer","styled","MovieList","MovieItem","MovieLink","Link","TopMoviesTitle","useState","topMovies","setTopMovies","location","useLocation","useEffect","length","GetMovies","results","data","map","topMovie","to","state","from","src","poster_path","alt","original_title"],"sourceRoot":""}